# Rel_H_D_sto(fic_arbres, mode_simul="DET", iteration=1, step=1,  parametre_ht_dhp)



test_that("Rel_H_D_sto() avec param par defaut estime les bonnes hauteurs", {
  data_arbre <- readRDS(test_path("fixtures", "data_arbre.rds"))
  data_arbre_attendu <- readRDS(test_path("fixtures", "data_arbre_attendu.rds"))
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt, data_arbre_attendu)
})

test_that("Rel_H_D_sto() avec param déterministe et fichier des parametres fournis estime les bonnes hauteurs", {
  data_arbre <- readRDS(test_path("fixtures", "data_arbre.rds"))
  data_arbre_attendu <- readRDS(test_path("fixtures", "data_arbre_attendu.rds"))
  parametre_ht_dhp_attendu <- readRDS(test_path("fixtures", "parametre_ht_dhp_attendu.rds"))
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre, mode_simul = 'DET', parametre_ht_dhp=parametre_ht_dhp_attendu)
  expect_equal(DataHt, data_arbre_attendu)
})

test_that("Rel_H_D_sto() avec essence non traitée retourne une hauteur NA", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.1, altitude=200, essence='SAQ', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NA)
})

test_that("Rel_H_D_sto() avec veg_pot non traitée retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE9', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.1, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})

test_that("Rel_H_D_sto() avec milieu manquant retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=NA, p_tot=1000, t_ma=0.1, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})

test_that("Rel_H_D_sto() avec sdom_bio non traité retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="7E", milieu=0, p_tot=1000, t_ma=0.1, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})

test_that("Rel_H_D_sto() avec p_tot manquant retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=NA, t_ma=0.1, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})
test_that("Rel_H_D_sto() avec t_ma manquant retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=NA, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})
test_that("Rel_H_D_sto() avec altitude manquant retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=NA, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})
test_that("Rel_H_D_sto() avec essence manquant retourne une hauteur NA", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='', dhpcm=10, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NA)
})
test_that("Rel_H_D_sto() avec dhpcm manquant retourne une hauteur NA", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=NA, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NA)
})
test_that("Rel_H_D_sto() avec dhpcm <9 retourne une hauteur NA", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=8, nb_tige=1, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NA)
})
test_that("Rel_H_D_sto() avec nb_tige manquant retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=NA, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  expect_equal(DataHt$hauteur_pred, NaN)
})
test_that("Rel_H_D_sto() avec un seul arbre et nb_tige=0 retourne une hauteur NaN", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=0, no_arbre=1)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  # avec une seul arbre dans la placette et nb_tige=0, la densité du peuplement est donc 0, donc le DQ moyenne ne se calcule pas (division par 0), donc dhpcm/dq_moy est à NaN, donc hauteur_pred est à NaN
  expect_equal(DataHt$hauteur_pred, NaN)
})
test_that("Rel_H_D_sto() avec 2 arbres dont un avec nb_tige=0 retourne les bonnes hauteurs", {
  data_arbre1 <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=0, no_arbre=1)
  data_arbre2 <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=2)
  data_arbre <- bind_rows(data_arbre1, data_arbre2)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  # s'il y a au moins un arbre avec nb_tige>0, le DQ moyen va se calculer avec ceux >0, et puisque nb_tige n'entre pas directement dans la prédiction de la haut, une hauteur va se calculer pour tous les arbres
  expect_equal(DataHt$hauteur_pred, c(8.990205,8.990205))
})
test_that("Rel_H_D_sto() avec id_pe manquant retourne les bonnes hauteurs", {
  data_arbre1 <- data.frame(id_pe='', veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  data_arbre2 <- data.frame(id_pe='1', veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=2)
  data_arbre <- bind_rows(data_arbre1, data_arbre2)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre)
  # si l'identifiant de placette est manquant pour certaines lignes, c'est arbres seront considérés comme faisant partis d'une meme placette dont l'identifiant est ''
  expect_equal(DataHt$hauteur_pred, c(8.990205,8.990205))
})

test_that("Rel_H_D_sto() avec milieu catégorique retourne une erreur", {
  data_arbre <- data.frame(id_pe=1, veg_pot='FE3', sdom_bio="1", milieu='0', p_tot=1000, t_ma=0.1, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1)
  expect_error(Rel_H_D_sto(fic_arbres=data_arbre))
})


# tester le stochastique quand il n'y qu'une seule mesure par arbre
test_that("Rel_H_D_sto() avec mode stochastique avec seed=20 estime les bonnes hauteurs", {
  data_arbre <- readRDS(test_path("fixtures", "data_arbre.rds"))
  data_arbre_attendu_sto <- readRDS(test_path("fixtures", "data_arbre_attendu_sto.rds"))
  parametre_ht_dhp <- param_ht_stoch(fic_arbres=data_arbre, mode_simul='STO', nb_iter=1, seed_value = 20)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre, mode_simul = "STO", iteration = 1, parametre_ht_dhp=parametre_ht_dhp)
  expect_equal(DataHt, data_arbre_attendu_sto)
})

# tester le stochastique quand il n'y plusieurs mesures par arbre
test_that("Rel_H_D_sto() avec mode stochastique (seed=20) et nb_step=4 pour le meme arbre retourne la bonne hauteur pour la mesure 2", {
  data_arbre1 <- data.frame(id_pe='1', veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=10, nb_tige=1, no_arbre=1, no_mes=1)
  data_arbre2 <- data.frame(id_pe='1', veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=11, nb_tige=1, no_arbre=1, no_mes=2)
  data_arbre3 <- data.frame(id_pe='1', veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=12, nb_tige=1, no_arbre=1, no_mes=3)
  data_arbre4 <- data.frame(id_pe='1', veg_pot='FE3', sdom_bio="1", milieu=0, p_tot=1000, t_ma=0.2, altitude=200, essence='ERS', dhpcm=13, nb_tige=1, no_arbre=1, no_mes=4)
  data_arbre <- bind_rows(data_arbre1, data_arbre2, data_arbre3, data_arbre4)

  parametre_ht_dhp_sto <- param_ht_stoch(fic_arbres=data_arbre, mode_simul='STO', nb_iter = 1, nb_step = 4, seed_value = 20)
  DataHt <- Rel_H_D_sto(fic_arbres=data_arbre[data_arbre$no_mes==2,], mode_simul = "STO", iteration = 1, step = 2, parametre_ht_dhp=parametre_ht_dhp_sto)

  expect_equal(DataHt$hauteur_pred, 9.5593838)
})



# tester un fichier avec quelques arbres avec une ht fournie et d'autres à estimer: NON, la fonction va toujours estimer la hauteur de tous les arbres du fichier, ça sera à l'utilisateur ensuite de remplacer les ht_pred par les hauteur mesurées au besoin



# la fct devrait être plus décortiquée
# il devrait y avoir une fct de base qui ne fait qu'appliquer l'équation à un seul arbre pour lequel on fournit les covariables nécessaires: ça serait bcp plus facile à tester
# puisqu'il y a 2 covariables qui dépendent des caractéristiques dendrométriques du peuplement, il pourrait aussi y avoir des fonctions qui applique la fct de base à chaque arbre du peuplement en calculant les caractéristiques
# mais je ne sais pas trop si c'est optimal quand on veut appliquer ça à tous les arbres de plusieurs placettes, car la prep se fait à l'échelle de la placette


