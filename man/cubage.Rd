% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Tarif_cubage.R
\name{cubage}
\alias{cubage}
\title{Estimating merchantable tree volume from DBH and height for a list of trees in plots}
\usage{
cubage(fic_arbres, mode_simul = "DET", iteration = 1, parametre_vol = NULL)
}
\arguments{
\item{fic_arbres}{Dataframe containing a list of trees in plots, these informations must be in the dataframe:
\itemize{
   \item id_pe: identifiant unique de la placette
   \item dhpcm: dhp (cm) de l'arbre ou classe de dhp (>9 cm)
   \item essence: code d'essence de l'arbre (ex: SAB, EPN, BOP)
   \item no_arbre: identifiant de l'arbre ou de la combinaison dhp/essence
   \item hauteur_pred: hauteur de l'arbre (m)
}}

\item{mode_simul}{Simulation mode (STO = stochastic, DET = deterministic), default "DET"}

\item{iteration}{If \code{mode_simul}='STO', iteration number to estimate (default 1)}

\item{parametre_vol}{If \code{mode_simul}='STO', Object with model parameters values, provided by \code{param_vol} function. If \code{mode_simul}='DET', the function \code{param_vol} is directly called in \code{cubage}, but \code{param_vol} can also be used.}
}
\value{
Dataframe \code{fic_arbres} with column vol_dm3 with estimated volume in dm3 (volume for one tree)
}
\description{
Estimate merchantable tree volume in dm3 with Fortin et al. (2007) equation for a list of trees in plots in a dataframe.
Estimation can be deterministic or stochastic.
}
\details{
The model for estimating tree volume is a linear mixed model with species as a covariate (Fortin et al. 2007).
There is a random plot effect and a viree random effect, but only the plot random effect is simulated in stochastic mode.
The residual errors are independant.

This function estimates merchantable tree volume, using deterministic or stochastic parameters for a given iteration.
If \code{mode_simul}='STO', the parameters must be loaded with \code{param_vol} function before using this function.

Fortin, M., J. DeBlois, S. Bernier et G. Blais, 2007. Mise au point d’un tarif de cubage général pour
les forêts québécoises : une approche pour mieux évaluer l’incertitude associée aux prévisions.
For. Chron. 83: 754-765.
}
\examples{
# Exemple 1: DETERMINISTE: un seul mesurage par arbre ----------------------------------------
# Estimer la hauteur et ensuite le volume
DataHt <- relation_h_d(fic_arbres=fic_arbres_test)
DataHtVol <- cubage(fic_arbres=DataHt)

# Exemple 2: DETERMINISTE: plusieurs mesurages par arbre -------------------------------------
# Estimer la hauteur et ensuite le volume
DataHt <- relation_h_d(fic_arbres=fic_artemis_det, grouping_vars = 'step')
DataHtVol <- cubage(fic_arbres=DataHt)

# Exemple 3: STOCHASTIQUE: une seul mesurage par arbre ---------------------------------------
# Générer les paramètres de hauteur volume pour plusieurs itérations
parametre_ht <- param_ht(fic_arbres=fic_arbres_test, mode_simul='STO', nb_iter=10)
parametre_vol <- param_vol(fic_arbres=fic_arbres_test, mode_simul='STO', nb_iter=10)
# Estimer la hauteur et le volume pour l'itération 2
DataHt <- relation_h_d(fic_arbres=fic_arbres_test, mode_simul='STO', iteration=2, parametre_ht=parametre_ht)
DataHtVol <- cubage(fic_arbres=DataHt, mode_simul='STO', iteration=2, parametre_vol=parametre_vol)

# Exemple 4: STOCHASTIQUE: plusieurs mesurages par arbre --------------------------------------
# Générer les paramètres de hauteur volume pour plusieurs step et itérations
parametre_ht <- param_ht(fic_arbres=fic_arbres_test, mode_simul='STO', nb_iter=10, nb_step=5)
parametre_vol <- param_vol(fic_arbres=fic_arbres_test, mode_simul='STO', nb_iter=10)
# Estimer la hauteur et le volume pour l'itération 2 et le pas de simulation 3
DataHt <- relation_h_d(fic_arbres=fic_arbres_test, mode_simul='STO', iteration=2, step=3, parametre_ht=parametre_ht)
DataHtVol <- cubage(fic_arbres=DataHt, mode_simul='STO', iteration=2, parametre_vol=parametre_vol)

# Exemple 5: STOCHASTIQUE: traiter toutes les itérations et step -------------------------------
# Générer les paramètres de hauteur et volume pour toutes les itérations et time steps
nb_iter <- length(unique(fic_artemis_sto$iter)) # 10
nb_step <- length(unique(fic_artemis_sto$step)) # 5
parametre_ht <- param_ht(fic_arbres=fic_artemis_sto, mode_simul='STO', nb_iter=nb_iter, nb_step=nb_step)
parametre_vol <- param_vol(fic_arbres=fic_artemis_sto, mode_simul='STO', nb_iter=nb_iter)
# Appliquer les modèles de hauteur et de volume à chaque iteration/step
fic_artemis_final1 <- NULL
for (i in 1:nb_iter){
  for (k in 1:nb_step){
      ht <- relation_h_d(fic_arbres=fic_artemis_sto[fic_artemis_sto$iter==i & fic_artemis_sto$step==k,], mode_simul='STO', iteration=i, step=k, parametre_ht=parametre_ht)
      vol <- cubage(fic_arbres=ht, mode_simul='STO', iteration=i, parametre_vol=parametre_vol)
      fic_artemis_final1 <- bind_rows(fic_artemis_final1, vol)
      }
   }

# On peut aussi paralléliser les deux boucles for
nb_iter <- length(unique(fic_artemis_sto$iter)) # 10
nb_step <- length(unique(fic_artemis_sto$step)) # 5
parametre_ht <- param_ht(fic_arbres=fic_artemis_sto, mode_simul='STO', nb_iter=nb_iter, nb_step=nb_step)
parametre_vol <- param_vol(fic_arbres=fic_artemis_sto, mode_simul='STO', nb_iter=nb_iter)
# Appliquer les modèles de hauteur et de volume à chaque iteration/step
registerDoFuture()
plan(multisession)
fic_artemis_final2 <- bind_rows(
  foreach (i = 1:nb_iter) \%:\% # nesting operator
      foreach (k = 1:nb_step) \%dopar\% {
            fic <- relation_h_d(fic_arbres=fic_artemis_sto[fic_artemis_sto$iter==i & fic_artemis_sto$step==k,], mode_simul='STO', iteration=i, step=k, parametre_ht=parametre_ht)
            fic <- cubage(fic_arbres=fic, mode_simul='STO', iteration=i, parametre_vol=parametre_vol)
            }
 )
}
